# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]

env:
  PV_PLUGIN_PATH: /usr/lib/paraview-5.8/plugins/TopologyToolKit

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Install Ubuntu dependencies
      run: |
        sudo apt update
        # ParaView dependencies
        sudo apt install -y \
          qt5-default \
          qttools5-dev \
          qtxmlpatterns5-dev-tools \
          libqt5x11extras5-dev \
          libqt5svg5-dev \
          dpkg-dev
        # TTK dependencies
        sudo apt install -y \
          libboost-dev \
          libeigen3-dev \
          libgraphviz-dev \
          libsqlite3-dev \
          graphviz \
          python3-sklearn \
          zlib1g-dev

    - name: Install Spectra dependency
      run: |
        git clone --depth 1 https://github.com/yixuan/spectra
        mkdir build_spectra && cd build_spectra
        cmake ../spectra
        sudo make install

    - name: Install ZFP dependency
      run: |
        git clone --depth 1 https://github.com/LLNL/zfp
        mkdir build_zfp && cd build_zfp
        cmake \
          -DBUILD_SHARED_LIBS=OFF \
          -DBUILD_TESTING=OFF \
          ../zfp
        sudo make -j$(nproc) install

    - uses: dsaltares/fetch-gh-release-asset@master
      with:
        repo: "pierre-guillou/paraview-ttk"
        version: "latest"
        file: "ttk-paraview-${{ matrix.os }}.deb"

    - name: Install ParaView .deb
      run: |
        sudo apt install ./ttk-paraview-${{ matrix.os }}.deb

    - name: Create & configure TTK build directory
      run: |
        mkdir build
        cd build
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DTTK_BUILD_PARAVIEW_PLUGINS=TRUE \
          -DTTK_BUILD_VTK_WRAPPERS=TRUE \
          -DTTK_BUILD_STANDALONE_APPS=TRUE \
          -DTTK_ENABLE_KAMIKAZE=TRUE \
          $GITHUB_WORKSPACE

    - name: Build TTK
      run: |
        cd build
        make -j$(nproc) package

    - name: Update package informations
      run: |
        cd build
        # unpack deb package to access control file
        mkdir tmp
        dpkg-deb -x ttk.deb tmp
        dpkg-deb --control ttk.deb tmp/DEBIAN
        # modify control file, remove libgcc-s1 dependency
        sed 's/libgcc-s1[^,]*, //g' -i tmp/DEBIAN/control
        # build updated deb package
        dpkg -b tmp ttk-${{ matrix.os }}.deb

    - name: Upload TTK .deb package
      uses: actions/upload-artifact@v2
      with:
        name: ttk-${{ matrix.os }}.deb
        path: build/ttk-${{ matrix.os }}.deb

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
    steps:
    - uses: actions/checkout@v2

    - uses: dsaltares/fetch-gh-release-asset@master
      with:
        repo: "pierre-guillou/paraview-ttk"
        version: "latest"
        file: "ttk-paraview-${{ matrix.os }}.deb"

    - name: Install ParaView .deb
      run: |
        sudo apt install ./ttk-paraview-${{ matrix.os }}.deb

    - name: Fetch TTK .deb artifact
      uses: actions/download-artifact@v2
      with:
        name: ttk-${{ matrix.os }}.deb

    - name: Install TTK .deb
      run: |
        sudo apt install ./ttk-${{ matrix.os }}.deb

    - name: Test TTK examples
      run: |
        source /etc/profile
        cd examples/pvpython
        PYTHONPATH= pvpython example.py ../data/inputData.vtu
        cd ../python
        python3 example.py ../data/inputData.vtu
        # cd ../c++
        # mkdir build && cd build
        # cmake ..
        # make
        # ./ttkExample-c++ ../../data/inputData.off
        # cd ../../vtk-c++
        # mkdir build &&  cd build
        # cmake ..
        # make
        # ./ttkExample-vtk-c++ ../../data/inputData.vtu
